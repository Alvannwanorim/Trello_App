// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
  OWNER
  ADMIN
  USER
  GUEST
}

 
model User {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  first_name          String
  last_name           String
  email               String?         @unique
  password            String
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  organizationIds      String[]          @db.ObjectId
  organozation        Organization[]      @relation(fields: [organizationIds], references: [id])
  role          Role  @default(USER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto())  @map("_id")           @db.ObjectId
  sessionToken String   @unique               @map("session_token")
  userId       String                         @map("user_id")       @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 

 model Organization {
  id      String              @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  ownerId String              @map("owner_id")
  logo    String 
  email   String
  phone   String
  address String
  zipCode String              @map("zip_code")
  city    String
  country String
  userIds String[] @db.ObjectId
  users   User[] @relation(fields: [userIds], references: [id])
  borad   Board[]
 }

 model Board {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  imageUrl String @map("image_url")

  orgId String @map("org_id") @db.ObjectId
  organization Organization @relation(fields: [orgId], references: [id])

  lists List[]
  createdAt           DateTime @map("created_at")  @default(now())
  updatedAt           DateTime @map("updated_at") @updatedAt
 }

 model List {
  id String @id @default(auto()) @db.ObjectId @map("_id")

  title String
  order Int

  boardId String @db.ObjectId @map("board_id")
  baord   Board @relation(fields: [boardId], references: [id], onDelete: Cascade) 

  cards Card[]

  @@index([boardId])

 }

  model Card {
  id String @id @default(auto()) @db.ObjectId @map("_id")

  title String
  order Int
  description String? 

  listId String @db.ObjectId @map("list_id")
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade) 

  @@index([listId])
 }